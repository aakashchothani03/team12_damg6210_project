-- USER table creation
CREATE TABLE USERS (
    USER_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    FIRSTNAME VARCHAR2(50) NOT NULL,
    LASTNAME VARCHAR2(50) NOT NULL,
    EMAIL VARCHAR2(70) NOT NULL,
    USERNAME VARCHAR2(50) UNIQUE NOT NULL,
    PASSWORD VARCHAR2(50) NOT NULL,
    IS_ACTIVE BOOLEAN
);

-- ADDRESS table creation
CREATE TABLE ADDRESS(
    ADDRESS_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    STREET1 VARCHAR2(100),
    STREET2 VARCHAR2(100),
    CITY VARCHAR2(40),
    COUNTY VARCHAR2(50),
    STATE VARCHAR2(50),
    ZIPCODE VARCHAR2(50),
    COUNTRY VARCHAR2(50)
);

-- CANDIDATE table creation
CREATE TABLE CANDIDATES (
    CANDIDATE_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    ADD_ID NUMBER NOT NULL,
    PHONE VARCHAR2(15),
    AGE NUMBER(2),
    GENDER VARCHAR2(15),
    VETERAN VARCHAR2(100),
    DISABILITY VARCHAR2(100),
    DATE_OF_JOIN DATE NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (ADD_ID) REFERENCES ADDRESS(ADDRESS_ID),
    CONSTRAINT CHK_GENDER CHECK (GENDER IN ('male', 'female')),
    CONSTRAINT CHK_VET_STATUS CHECK (VETERAN IN ('do not want to share', 'not a veteran', 'protected veteran')),
    CONSTRAINT CHK_DISABILITY CHECK (DISABILITY IN ('do not want to share', 'no, I do not have a disability', 'yes, I have a disability'))
);

-- WORK EXPERIENCE table creation - Candidate's Work Experience
CREATE TABLE WORK_EXP (
    CANDIDATE_ID NUMBER NOT NULL,
    COMPANY_NAME VARCHAR2(100) NOT NULL,
    JOB_TITLE VARCHAR2(100) NOT NULL,
    START_DATE DATE,
    END_DATE DATE,
    DESCRIPTION VARCHAR2(2000),
    FOREIGN KEY (CANDIDATE_ID) REFERENCES CANDIDATES(CANDIDATE_ID)
);

-- EDUCATION table creation
CREATE TABLE EDUCATION (
    CANDIDATE_ID NUMBER NOT NULL,
    UNIVERSITY_NAME VARCHAR2(150) NOT NULL,
    DEGREE VARCHAR2(50) NOT NULL,
    MAJOR VARCHAR2(100),
    START_DATE DATE,
    END_DATE DATE,
    DEGREE_COMPLETED BOOLEAN,
    FOREIGN KEY (CANDIDATE_ID) REFERENCES CANDIDATES(CANDIDATE_ID)
);

-- RESUME table creation
CREATE TABLE RESUME(
    RESUME_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    CANDIDATE_ID NUMBER NOT NULL,
    RES_DOC BLOB NOT NULL,
    DATE_UPLOADED DATE NOT NULL,
    DESCRIPTION VARCHAR2(200),
    FOREIGN KEY (CANDIDATE_ID) REFERENCES CANDIDATES(CANDIDATE_ID)
);

-- SKILLS table creation - all the skills present on the platform
CREATE TABLE SKILLS (
    SKILL_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    SKILL_NAME VARCHAR2(100) NOT NULL
);

-- CANDIDATE SKILLS Join Table
CREATE TABLE CANDIDATE_SKILLS(
    CAN_SKILL_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    CANDIDATE_ID NUMBER NOT NULL,
    SKILL_ID NUMBER NOT NULL,
    FOREIGN KEY (CANDIDATE_ID) REFERENCES CANDIDATES(CANDIDATE_ID),
    FOREIGN KEY (SKILL_ID) REFERENCES SKILLS(SKILL_ID),
    CONSTRAINT PK_CAN_SKILL PRIMARY KEY(CANDIDATE_ID, SKILL_ID)
);

-- COMPANY table creation
CREATE TABLE COMPANIES (
    COMPANY_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ADD_ID NUMBER,
    NAME VARCHAR2(50) NOT NULL UNIQUE,
    EMAIL VARCHAR2(50) NOT NULL,
    PHONE VARCHAR2(15) NOT NULL,
    IS_ACTIVE BOOLEAN,
    FOREIGN KEY (ADD_ID) REFERENCES ADDRESS(ADDRESS_ID)
);

-- RECRUITER table creation
CREATE TABLE RECRUITERS (
    RECRUITER_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    COMPANY_ID NUMBER NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(COMPANY_ID),
    CONSTRAINT PK_REC_COM PRIMARY KEY(USER_ID, COMPANY_ID)
);

-- JOB REQUISITION table creation
CREATE TABLE JOB_REQUISITION(
    REQ_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    COMPANY_ID NUMBER NOT NULL,
    RECRUITER_ID NUMBER NOT NULL,
    JOB_TITLE VARCHAR2(100) NOT NULL,
    JOB_DESCRIPTION VARCHAR2(5000) NOT NULL,
    DATE_POSTED DATE NOT NULL,
    APPLICATION_DEADLINE DATE,
    EXPECTED_START_DATE DATE,
    RELOCATION_ALLOWANCE BOOLEAN,
    STATUS VARCHAR2(20) NOT NULL,
    FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(COMPANY_ID),
    FOREIGN KEY (RECRUITER_ID) REFERENCES RECRUITERS(RECRUITER_ID),
    CONSTRAINT CHK_JOB_REQ_STATUS CHECK (STATUS IN ('cancelled', 'closed', 'open'))
);

-- CANDIDATE APPLICATION Join Table
CREATE TABLE CANDIDATE_APPLICATION (
    CAN_APP_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    CANDIDATE_ID NUMBER NOT NULL,
    REQ_ID NUMBER NOT NULL,
    STATUS VARCHAR2(30) NOT NULL,
    WILLING_TO_RELOCATE BOOLEAN,
    FOREIGN KEY (CANDIDATE_ID) REFERENCES CANDIDATES(CANDIDATE_ID),
    FOREIGN KEY (REQ_ID) REFERENCES JOB_REQUISITION(REQ_ID),
    CONSTRAINT PK_CAN_REQ PRIMARY KEY(CANDIDATE_ID, REQ_ID),
    CONSTRAINT CHK_CAN_APP_STATUS CHECK (STATUS IN ('candidate rejected', 'in review', 'offer accepted', 'offer rejected', 'requisition closed/ transfered', 'role offered', 'submitted', 'withdrawn'))
);